{"version":3,"sources":["Components/Error.jsx","Components/NavBar.jsx","properties.js","Hooks/FetchHook.js","Context/MeasureContext.js","Components/TemperatureMeasureSwitch.jsx","Helper/TemperatureUtil.js","Components/Temperature.jsx","Components/LocationTime.jsx","Components/Weather.jsx","Components/FiveDayForecast.jsx","Components/MainContent.jsx","Components/Home.jsx","Hooks/LocationHook.js","App.js","serviceWorker.js","index.js"],"names":["Error","errorMessage","Card","raised","CardHeader","subheader","NavBar","AppBar","position","Tabs","value","Tab","label","component","NavLink","to","properties","useFetchHook","url","options","useState","isLoading","setIsLoading","setValue","error","setError","useEffect","fetch","then","response","ok","statusText","json","data","catch","err","MeasureContext","createContext","TemperatureMeasureSwitch","useContext","isMetric","setIsMetric","Button","size","variant","color","onClick","getTemperature","temperature","Math","round","converToCelcius","temperatureInF","Temperature","props","Grid","item","Typography","date","Date","toString","slice","temp","feelsLike","condition","src","icon","alt","LocationTime","city","container","spacing","LocationOn","toLocaleTimeString","hour","minute","Weather","location","latitude","longitude","weather","LinearProgress","Box","m","xs","sm","md","lg","Paper","elevation","p","direction","name","alignItems","justify","main","feels_like","dt_txt","FiveDayForecast","forecast","list","filter","index","map","key","dt","MainContent","className","Provider","exact","path","Home","setLocation","navigator","geolocation","getCurrentPosition","coords","useLocation","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2138351.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardHeader } from \"@material-ui/core\";\r\n\r\nconst Error = ({ errorMessage }) => {\r\n  return (\r\n    <Card raised>\r\n      <CardHeader subheader={errorMessage} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\nimport { AppBar, Tabs, Tab } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Tabs value={false}>\r\n        <Tab label=\"Weather\" component={NavLink} to=\"/weather\" />\r\n        <Tab label=\"Forecast\" component={NavLink} to=\"/forecast\" />\r\n      </Tabs>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","export const properties = {\r\n  apiKey: \"95c3dbda29852d8d2d2de3dec7b3d340\",\r\n  weatherUrl: \"https://api.openweathermap.org/data/2.5/weather\",\r\n  forecastUrl: \"https://api.openweathermap.org/data/2.5/forecast\",\r\n  weatherIconUrl: \"https://openweathermap.org/img/wn\"\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetchHook = (url, options) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [value, setValue] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(url)\r\n      .then(response => {\r\n        setIsLoading(false);\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => setValue(data))\r\n      .catch(err => setError(err));\r\n  }, [url, options]);\r\n\r\n  return [isLoading, value, error];\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nexport const MeasureContext = createContext(null);\r\n","import React, { useContext } from \"react\";\r\nimport { MeasureContext } from \"../Context/MeasureContext\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst TemperatureMeasureSwitch = () => {\r\n  const { isMetric, setIsMetric } = useContext(MeasureContext);\r\n\r\n  return (\r\n    <Button\r\n      size=\"small\"\r\n      variant=\"outlined\"\r\n      color=\"secondary\"\r\n      onClick={() => setIsMetric(!isMetric)}\r\n    >\r\n      {isMetric ? `Fahrenheit` : `Celsius`}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default TemperatureMeasureSwitch;\r\n","export const getTemperature = (temperature, isMetric) => {\r\n  return isMetric\r\n    ? Math.round(converToCelcius(temperature)) + \"\\xB0C\"\r\n    : Math.round(temperature) + \"\\xB0F\";\r\n};\r\n\r\nconst converToCelcius = temperatureInF => (temperatureInF - 32) * (5 / 9);\r\n","import React, { useContext } from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { getTemperature } from \"../Helper/TemperatureUtil\";\r\nimport { properties } from \"../properties\";\r\nimport { MeasureContext } from \"../Context/MeasureContext\";\r\n\r\nconst Temperature = props => {\r\n  const { isMetric } = useContext(MeasureContext);\r\n\r\n  return (\r\n    <>\r\n      <Grid item>\r\n        <Typography variant=\"subtitle2\">\r\n          {props.date && new Date(props.date).toString().slice(0, 10)}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h4\">\r\n          {getTemperature(props.temp, isMetric)}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n          Real Feel: {getTemperature(props.feelsLike, isMetric)}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n          {props.condition}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <img\r\n          src={`${properties.weatherIconUrl}/${props.icon}@2x.png`}\r\n          alt=\"weather-icon\"\r\n        ></img>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Temperature;\r\n","import React from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { LocationOn } from \"@material-ui/icons\";\r\n\r\nconst LocationTime = ({ city }) => {\r\n  const getCurrentTime = () =>\r\n    new Date().toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\"\r\n    });\r\n  return (\r\n    <Grid item>\r\n      <Grid container spacing={1}>\r\n        <Grid item>\r\n          <LocationOn color=\"disabled\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"h6\">{city}</Typography>\r\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n            {getCurrentTime()}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default LocationTime;\r\n","import React from \"react\";\r\nimport { Box, Grid, LinearProgress, Paper } from \"@material-ui/core\";\r\nimport { properties } from \"../properties\";\r\nimport Error from \"./Error\";\r\nimport { useFetchHook } from \"../Hooks/FetchHook\";\r\nimport TemperatureMeasureSwitch from \"./TemperatureMeasureSwitch\";\r\nimport Temperature from \"./Temperature\";\r\nimport LocationTime from \"./LocationTime\";\r\n\r\nconst Weather = ({ location }) => {\r\n  const [isLoading, weather, error] = useFetchHook(\r\n    `${properties.weatherUrl}?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appId=${properties.apiKey}`,\r\n    location\r\n  );\r\n\r\n  if (isLoading) return <LinearProgress color=\"secondary\" />;\r\n\r\n  if (error)\r\n    return (\r\n      <Error errorMessage=\"Unable to get weather data. Please try again after sometime\" />\r\n    );\r\n\r\n  return (\r\n    <Box m={2}>\r\n      <Grid item xs={12} sm={5} md={4} lg={3}>\r\n        {weather && (\r\n          <Paper elevation={3}>\r\n            <Box p={2}>\r\n              <Grid container direction=\"column\" spacing={1}>\r\n                <LocationTime city={weather.name} />\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  alignItems=\"center\"\r\n                  justify=\"center\"\r\n                  spacing={1}\r\n                >\r\n                  <Temperature\r\n                    temp={weather.main.temp}\r\n                    condition={weather.weather[0].main}\r\n                    feelsLike={weather.main.feels_like}\r\n                    icon={weather.weather[0].icon}\r\n                    date={weather.dt_txt}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TemperatureMeasureSwitch />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Paper>\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { Box, Paper, Grid, LinearProgress } from \"@material-ui/core\";\r\nimport Error from \"./Error\";\r\nimport { properties } from \"../properties\";\r\nimport { useFetchHook } from \"../Hooks/FetchHook\";\r\nimport TemperatureMeasureSwitch from \"./TemperatureMeasureSwitch\";\r\nimport Temperature from \"./Temperature\";\r\nimport LocationTime from \"./LocationTime\";\r\n\r\nconst FiveDayForecast = ({ location }) => {\r\n  const [isLoading, forecast, error] = useFetchHook(\r\n    `${properties.forecastUrl}?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appId=${properties.apiKey}`,\r\n    location\r\n  );\r\n\r\n  if (isLoading) return <LinearProgress color=\"secondary\" />;\r\n\r\n  if (error)\r\n    return (\r\n      <Error errorMessage=\"Unable to get weather data. Please try again after sometime\" />\r\n    );\r\n\r\n  return (\r\n    <Box m={2}>\r\n      {forecast && (\r\n        <Paper elevation={3}>\r\n          <Box p={2}>\r\n            <Grid container direction=\"column\" spacing={2}>\r\n              <LocationTime city={forecast.city.name} />\r\n              <Grid item container justify=\"space-around\">\r\n                {forecast.list\r\n                  .filter((data, index) => index % 8 === 0)\r\n                  .map(data => (\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      direction=\"column\"\r\n                      alignItems=\"center\"\r\n                      spacing={1}\r\n                      xs={6}\r\n                      md={2}\r\n                      key={data.dt}\r\n                    >\r\n                      <Temperature\r\n                        temp={data.main.temp}\r\n                        condition={data.weather[0].main}\r\n                        feelsLike={data.main.feels_like}\r\n                        icon={data.weather[0].icon}\r\n                        date={data.dt_txt}\r\n                      />\r\n                    </Grid>\r\n                  ))}\r\n              </Grid>\r\n              <Grid item>\r\n                <TemperatureMeasureSwitch />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Paper>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FiveDayForecast;\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Weather from \"./Weather\";\r\nimport FiveDayForecast from \"./FiveDayForecast\";\r\nimport { MeasureContext } from \"../Context/MeasureContext\";\r\n\r\nconst MainContent = ({ location }) => {\r\n  const [isMetric, setIsMetric] = useState(false);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <MeasureContext.Provider value={{ isMetric, setIsMetric }}>\r\n        <Switch>\r\n          <Route exact path=\"/weather\">\r\n            <Weather location={location} />\r\n          </Route>\r\n          <Route exact path=\"/forecast\">\r\n            <FiveDayForecast location={location} />\r\n          </Route>\r\n          <Redirect to=\"/weather\"></Redirect>\r\n        </Switch>\r\n      </MeasureContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import React from \"react\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { useLocation } from \"../Hooks/LocationHook\";\r\nimport Error from \"./Error\";\r\nimport NavBar from \"./NavBar\";\r\nimport MainContent from \"./MainContent\";\r\n\r\nconst Home = () => {\r\n  const location = useLocation();\r\n\r\n  if (!location) {\r\n    return <Error errorMessage=\"Please enable location and try again\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {location && (\r\n        <HashRouter>\r\n          <NavBar />\r\n          <MainContent location={location} />\r\n        </HashRouter>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useLocation = () => {\r\n  const [location, setLocation] = useState();\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(data => {\r\n        const location = {\r\n          latitude: data.coords.latitude,\r\n          longitude: data.coords.longitude\r\n        };\r\n        setLocation(location);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return location;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}