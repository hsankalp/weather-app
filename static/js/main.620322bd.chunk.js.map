{"version":3,"sources":["properties.js","Components/Loading.jsx","Components/Error.jsx","Helper/convertTemperature.js","Components/Weather.jsx","API/WeatherAPI.js","Components/DailyForecast.jsx","Components/FiveDayForecast.jsx","API/ForecastAPI.js","Components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["properties","Loading","CardHeader","subheader","Error","converToCelcius","temperatureInF","Weather","location","isMetric","onButtonClick","useState","weather","setWeather","error","setError","useEffect","console","log","fetch","latitude","longitude","then","response","ok","statusText","json","getWeatherByLocation","data","catch","err","temp","Card","raised","className","title","main","Math","round","name","Date","toLocaleTimeString","hour","minute","CardContent","src","icon","alt","CardActions","Button","size","color","onClick","DailyForecast","date","min","max","Typography","variant","toString","slice","FiveDayForecast","forecast","setForecast","getForecastByLocation","getTemperature","city","Grid","container","justify","spacing","list","filter","index","map","key","dt","item","dt_txt","temp_min","temp_max","Home","value","setValue","setLocation","setIsMetric","navigator","geolocation","getCurrentPosition","coords","handleMeasureChange","AppBar","position","Tabs","onChange","e","val","Tab","label","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iXAAaA,EACH,mCADGA,EAEC,kDAFDA,EAGE,mDAHFA,EAIK,oC,UCGHC,EAJC,WACd,OAAO,kBAACC,EAAA,EAAD,CAAYC,UAAU,gBCKhBC,EAND,WACZ,OACE,kBAACF,EAAA,EAAD,CAAYC,UAAU,6DCLbE,EAAkB,SAAAC,GAAc,OAClB,EAAI,GAA5BA,EAAiB,KCgELC,EAlDC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAAoB,EAC3BC,qBAD2B,mBAClDC,EADkD,KACzCC,EADyC,OAE/BF,qBAF+B,mBAElDG,EAFkD,KAE3CC,EAF2C,KAIzDC,qBAAU,WACRC,QAAQC,IAAI,6BAA8BV,GClBvC,SAA8BA,GACnC,OAAOW,MAAM,GAAD,OACPnB,EADO,gBACsBQ,EAASY,SAD/B,gBAC+CZ,EAASa,UADxD,iCAC0FrB,IACpGsB,MAAK,SAAAC,GACL,IAAKA,EAASC,GACZ,MAAMpB,MAAMmB,EAASE,YAEvB,OAAOF,EAASG,UDYhBC,CAAqBnB,GAClBc,MAAK,SAAAM,GAAI,OAAIf,EAAWe,MACxBC,OAAM,SAAAC,GAAG,OAAIf,EAASe,QACxB,CAACtB,IAEJ,IAMuBuB,EAMvB,OACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,UAAU,oBACpBtB,GACC,oCACE,kBAACV,EAAA,EAAD,CACEiC,OAXaJ,EAWSnB,EAAQwB,KAAKL,KAVpCtB,EACH4B,KAAKC,MAAMjC,EAAgB0B,IAAS,QACpCM,KAAKC,MAAMP,GAAQ,SASf5B,UAAWS,EAAQ2B,KAAO,KAjBlC,IAAIC,MAAOC,mBAAmB,GAAI,CAChCC,KAAM,UACNC,OAAQ,cAiBJ,kBAACC,EAAA,EAAD,KACE,yBACEC,IAAG,UAAK7C,EAAL,YAAkCY,EAAQA,QAAQ,GAAGkC,KAArD,WACHC,IAAI,kBAGR,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,UAAUC,QAAS1C,GAC3CD,EAAW,kDAAkB,kDAKrCK,GAAS,kBAAC,EAAD,OACRA,IAAUF,GAAW,kBAAC,EAAD,Q,gBEpCdyC,EApBO,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,IAAKV,EAAW,EAAXA,KACvC,OACE,oCACE,kBAACW,EAAA,EAAD,CAAYC,QAAQ,QAAQP,MAAM,iBAC/B,IAAIX,KAAKc,GAAMK,WAAWC,MAAM,EAAG,KAEtC,yBACEf,IAAG,UAAK7C,EAAL,YAAkC8C,EAAlC,WACHC,IAAI,iBAEN,kBAACU,EAAA,EAAD,CAAYC,QAAQ,QAAQP,MAAM,eAAlC,QACQK,GAER,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQP,MAAM,iBAAlC,QACQI,K,UCiDCM,EAnDS,SAAC,GAA2C,IAAzCrD,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAAoB,EACjCC,qBADiC,mBAC1DmD,EAD0D,KAChDC,EADgD,OAEvCpD,qBAFuC,mBAE1DG,EAF0D,KAEnDC,EAFmD,KAIjEC,qBAAU,WACRC,QAAQC,IAAI,8BAA+BV,GCnBxC,SAA+BA,GACpC,OAAOW,MAAM,GAAD,OACPnB,EADO,gBACuBQ,EAASY,SADhC,gBACgDZ,EAASa,UADzD,iCAC2FrB,IACrGsB,MAAK,SAAAC,GACL,IAAKA,EAASC,GACZ,MAAMpB,MAAMmB,EAASE,YAEvB,OAAOF,EAASG,UDahBsC,CAAsBxD,GACnBc,MAAK,SAAAM,GAAI,OAAImC,EAAYnC,MACzBC,OAAM,SAAAC,GAAG,OAAIf,EAASe,QACxB,CAACtB,IAEJ,IAAMyD,EAAiB,SAAAlC,GACrB,OAAOtB,EACH4B,KAAKC,MAAMjC,EAAgB0B,IAAS,QACpCM,KAAKC,MAAMP,GAAQ,SAGzB,OACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,UAAU,qBACpB4B,GACC,oCACE,kBAAC5D,EAAA,EAAD,CAAYiC,MAAO2B,EAASI,KAAK3B,KAAMpC,UAAU,mBACjD,kBAACyC,EAAA,EAAD,KACE,kBAACuB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACvCR,EAASS,KACPC,QAAO,SAAC5C,EAAM6C,GAAP,OAAiBA,EAAQ,IAAM,KACtCC,KAAI,SAAA9C,GAAI,OACP,kBAACuC,EAAA,EAAD,CAAMQ,IAAK/C,EAAKgD,GAAIC,MAAI,EAAC3C,UAAU,4BACjC,kBAAC,EAAD,CACEoB,KAAM1B,EAAKkD,OACXvB,IAAKU,EAAerC,EAAKQ,KAAK2C,UAC9BvB,IAAKS,EAAerC,EAAKQ,KAAK4C,UAC9BlC,KAAMlB,EAAKhB,QAAQ,GAAGkC,aAMlC,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,UAAUC,QAAS1C,GAC3CD,EAAW,kDAAkB,kDAKrCK,GAAS,kBAAC,EAAD,OACRA,IAAUgD,GAAY,kBAAC,EAAD,QEFfmB,EAvDF,WAAO,IAAD,EACStE,mBAAS,GADlB,mBACVuE,EADU,KACHC,EADG,OAEexE,qBAFf,mBAEVH,EAFU,KAEA4E,EAFA,OAGezE,oBAAS,GAHxB,mBAGVF,EAHU,KAGA4E,EAHA,KAKjBrE,qBAAU,WACRsE,UAAUC,aACRD,UAAUC,YAAYC,oBAAmB,SAAA5D,GACvC,IAAMpB,EAAW,CACfY,SAAUQ,EAAK6D,OAAOrE,SACtBC,UAAWO,EAAK6D,OAAOpE,WAEzB+D,EAAY5E,QAEf,IAEH,IAIMkF,EAAsB,WAC1BL,GAAa5E,IAGf,OACE,oCACE,kBAACkF,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAAMX,MAAOA,EAAOY,SAXL,SAACC,EAAGC,GACvBb,EAASa,KAWH,kBAACC,EAAA,EAAD,CAAKC,MAAM,YACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,qBAGJ,IAAVhB,GAAe1E,GACd,kBAAC,EAAD,CACEA,SAAUA,EACVC,SAAUA,EACVC,cAAegF,IAGR,IAAVR,GAAe1E,GACd,kBAAC,EAAD,CACEA,SAAUA,EACVC,SAAUA,EACVC,cAAegF,KAGjBlF,GACA,kBAACwB,EAAA,EAAD,CAAMC,QAAM,GACV,kBAAC/B,EAAA,EAAD,CAAYC,UAAU,8BCzCjBgG,MARf,WACE,OACE,yBAAKjE,UAAU,OACb,kBAAC,EAAD,QCKckE,QACW,cAA7BC,OAAO7F,SAAS8F,UAEe,UAA7BD,OAAO7F,SAAS8F,UAEhBD,OAAO7F,SAAS8F,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MAAMvF,MAAK,SAAAwF,GACjCA,EAAaC,kB","file":"static/js/main.620322bd.chunk.js","sourcesContent":["export const properties = {\r\n  apiKey: \"95c3dbda29852d8d2d2de3dec7b3d340\",\r\n  weatherUrl: \"https://api.openweathermap.org/data/2.5/weather\",\r\n  forecastUrl: \"https://api.openweathermap.org/data/2.5/forecast\",\r\n  weatherIconUrl: \"https://openweathermap.org/img/wn\"\r\n};\r\n","import React from \"react\";\r\nimport { CardHeader } from \"@material-ui/core\";\r\n\r\nconst Loading = () => {\r\n  return <CardHeader subheader=\"Loading...\" />;\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport { CardHeader } from \"@material-ui/core\";\r\n\r\nconst Error = () => {\r\n  return (\r\n    <CardHeader subheader=\"Unable to fetch weather data. Please try after sometime\" />\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","export const converToCelcius = temperatureInF =>\r\n  (temperatureInF - 32) * (5 / 9);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { getWeatherByLocation } from \"../API/WeatherAPI\";\r\nimport { properties } from \"../properties\";\r\nimport \"../Styles/Weather.css\";\r\nimport Loading from \"./Loading\";\r\nimport Error from \"./Error\";\r\nimport { converToCelcius } from \"../Helper/convertTemperature\";\r\n\r\nconst Weather = ({ location, isMetric, onButtonClick }) => {\r\n  const [weather, setWeather] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching weather data for \", location);\r\n    getWeatherByLocation(location)\r\n      .then(data => setWeather(data))\r\n      .catch(err => setError(err));\r\n  }, [location]);\r\n\r\n  const getCurrentTime = () =>\r\n    new Date().toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\"\r\n    });\r\n\r\n  const getTemperature = temp => {\r\n    return isMetric\r\n      ? Math.round(converToCelcius(temp)) + \"\\xB0C\"\r\n      : Math.round(temp) + \"\\xB0F\";\r\n  };\r\n\r\n  return (\r\n    <Card raised className=\"weather-app-card\">\r\n      {weather && (\r\n        <>\r\n          <CardHeader\r\n            title={getTemperature(weather.main.temp)}\r\n            subheader={weather.name + \" \" + getCurrentTime()}\r\n          />\r\n          <CardContent>\r\n            <img\r\n              src={`${properties.weatherIconUrl}/${weather.weather[0].icon}@2x.png`}\r\n              alt=\"weather-icon\"\r\n            ></img>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size=\"small\" color=\"primary\" onClick={onButtonClick}>\r\n              {isMetric ? <>Fahrenheit</> : <>Celcius</>}\r\n            </Button>\r\n          </CardActions>\r\n        </>\r\n      )}\r\n      {error && <Error />}\r\n      {!error && !weather && <Loading />}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import { properties } from \"../properties\";\r\n\r\nexport function getWeatherByLocation(location) {\r\n  return fetch(\r\n    `${properties.weatherUrl}?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appId=${properties.apiKey}`\r\n  ).then(response => {\r\n    if (!response.ok) {\r\n      throw Error(response.statusText);\r\n    }\r\n    return response.json();\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { properties } from \"../properties\";\r\n\r\nconst DailyForecast = ({ date, min, max, icon }) => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"body2\" color=\"textSecondary\">\r\n        {new Date(date).toString().slice(0, 10)}\r\n      </Typography>\r\n      <img\r\n        src={`${properties.weatherIconUrl}/${icon}@2x.png`}\r\n        alt=\"weather-icon\"\r\n      ></img>\r\n      <Typography variant=\"body2\" color=\"textPrimary\">\r\n        Max: {max}\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"textSecondary\">\r\n        Min: {min}\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DailyForecast;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Grid,\r\n  CardActions,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport DailyForecast from \"./DailyForecast\";\r\nimport { getForecastByLocation } from \"../API/ForecastAPI\";\r\nimport \"../Styles/Forecast.css\";\r\nimport Error from \"./Error\";\r\nimport Loading from \"./Loading\";\r\nimport { converToCelcius } from \"../Helper/convertTemperature\";\r\n\r\nconst FiveDayForecast = ({ location, isMetric, onButtonClick }) => {\r\n  const [forecast, setForecast] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching forecast data for \", location);\r\n    getForecastByLocation(location)\r\n      .then(data => setForecast(data))\r\n      .catch(err => setError(err));\r\n  }, [location]);\r\n\r\n  const getTemperature = temp => {\r\n    return isMetric\r\n      ? Math.round(converToCelcius(temp)) + \"\\xB0C\"\r\n      : Math.round(temp) + \"\\xB0F\";\r\n  };\r\n\r\n  return (\r\n    <Card raised className=\"forecast-app-card\">\r\n      {forecast && (\r\n        <>\r\n          <CardHeader title={forecast.city.name} subheader=\"5 Day Forecast\" />\r\n          <CardContent>\r\n            <Grid container justify=\"center\" spacing={4}>\r\n              {forecast.list\r\n                .filter((data, index) => index % 8 === 0)\r\n                .map(data => (\r\n                  <Grid key={data.dt} item className=\"daily-forecast-grid-item\">\r\n                    <DailyForecast\r\n                      date={data.dt_txt}\r\n                      min={getTemperature(data.main.temp_min)}\r\n                      max={getTemperature(data.main.temp_max)}\r\n                      icon={data.weather[0].icon}\r\n                    />\r\n                  </Grid>\r\n                ))}\r\n            </Grid>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size=\"small\" color=\"primary\" onClick={onButtonClick}>\r\n              {isMetric ? <>Fahrenheit</> : <>Celcius</>}\r\n            </Button>\r\n          </CardActions>\r\n        </>\r\n      )}\r\n      {error && <Error />}\r\n      {!error && !forecast && <Loading />}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FiveDayForecast;\r\n","import { properties } from \"../properties\";\r\n\r\nexport function getForecastByLocation(location) {\r\n  return fetch(\r\n    `${properties.forecastUrl}?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appId=${properties.apiKey}`\r\n  ).then(response => {\r\n    if (!response.ok) {\r\n      throw Error(response.statusText);\r\n    }\r\n    return response.json();\r\n  });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { AppBar, Tabs, Tab, Card, CardHeader } from \"@material-ui/core\";\r\nimport Weather from \"./Weather\";\r\nimport FiveDayForecast from \"./FiveDayForecast\";\r\n\r\nconst Home = () => {\r\n  const [value, setValue] = useState(0);\r\n  const [location, setLocation] = useState();\r\n  const [isMetric, setIsMetric] = useState(false);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation &&\r\n      navigator.geolocation.getCurrentPosition(data => {\r\n        const location = {\r\n          latitude: data.coords.latitude,\r\n          longitude: data.coords.longitude\r\n        };\r\n        setLocation(location);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e, val) => {\r\n    setValue(val);\r\n  };\r\n\r\n  const handleMeasureChange = () => {\r\n    setIsMetric(!isMetric);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab label=\"Weather\" />\r\n          <Tab label=\"5 Day Forecast\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      {value === 0 && location && (\r\n        <Weather\r\n          location={location}\r\n          isMetric={isMetric}\r\n          onButtonClick={handleMeasureChange}\r\n        />\r\n      )}\r\n      {value === 1 && location && (\r\n        <FiveDayForecast\r\n          location={location}\r\n          isMetric={isMetric}\r\n          onButtonClick={handleMeasureChange}\r\n        />\r\n      )}\r\n      {!location && (\r\n        <Card raised>\r\n          <CardHeader subheader=\"Please enable location\" />\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}