{"version":3,"sources":["properties.js","Components/Error.jsx","Helper/TemperatureUtil.js","Hooks/HttpHook.js","Components/Weather.jsx","Components/DailyForecast.jsx","Components/FiveDayForecast.jsx","Components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["properties","Error","CardHeader","subheader","converToCelcius","temperatureInF","useHttpHook","url","location","useState","isLoading","setIsLoading","value","setValue","error","setError","useEffect","console","log","fetch","latitude","longitude","then","response","ok","statusText","json","data","catch","err","Weather","temp","isMetric","onButtonClick","LinearProgress","color","Card","raised","className","title","main","Math","round","name","Date","toLocaleTimeString","hour","minute","CardContent","src","weather","icon","alt","CardActions","Button","size","onClick","DailyForecast","date","min","max","Typography","variant","toString","slice","FiveDayForecast","getTemperature","city","Grid","container","justify","spacing","list","filter","index","map","key","dt","item","dt_txt","temp_min","temp_max","Home","setLocation","setIsMetric","navigator","geolocation","getCurrentPosition","coords","handleMeasureChange","AppBar","position","Tabs","onChange","e","val","Tab","label","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbf1a6ce.chunk.js","sourcesContent":["export const properties = {\r\n  apiKey: \"95c3dbda29852d8d2d2de3dec7b3d340\",\r\n  weatherUrl: \"https://api.openweathermap.org/data/2.5/weather\",\r\n  forecastUrl: \"https://api.openweathermap.org/data/2.5/forecast\",\r\n  weatherIconUrl: \"https://openweathermap.org/img/wn\"\r\n};\r\n","import React from \"react\";\r\nimport { CardHeader } from \"@material-ui/core\";\r\n\r\nconst Error = () => {\r\n  return (\r\n    <CardHeader subheader=\"Unable to fetch weather data. Please try after sometime\" />\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","export const converToCelcius = temperatureInF =>\r\n  (temperatureInF - 32) * (5 / 9);\r\n","import { useState, useEffect } from \"react\";\r\nimport { properties } from \"../properties\";\r\n\r\nexport const useHttpHook = (url, location) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [value, setValue] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching data for \", location);\r\n    setIsLoading(true);\r\n    fetch(\r\n      `${url}?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appId=${properties.apiKey}`\r\n    )\r\n      .then(response => {\r\n        setIsLoading(false);\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => setValue(data))\r\n      .catch(err => setError(err));\r\n  }, [url, location]);\r\n\r\n  return [isLoading, value, error];\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\nimport { properties } from \"../properties\";\r\nimport \"../Styles/Weather.css\";\r\nimport Error from \"./Error\";\r\nimport { converToCelcius } from \"../Helper/TemperatureUtil\";\r\nimport { useHttpHook } from \"../Hooks/HttpHook\";\r\n\r\nconst Weather = ({ location, isMetric, onButtonClick }) => {\r\n  const [isLoading, value, error] = useHttpHook(\r\n    properties.weatherUrl,\r\n    location\r\n  );\r\n\r\n  const getCurrentTime = () =>\r\n    new Date().toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\"\r\n    });\r\n\r\n  const getTemperature = temp => {\r\n    return isMetric\r\n      ? Math.round(converToCelcius(temp)) + \"\\xB0C\"\r\n      : Math.round(temp) + \"\\xB0F\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <LinearProgress color=\"secondary\" />}\r\n      <Card raised className=\"weather-app-card\">\r\n        {value && (\r\n          <>\r\n            <CardHeader\r\n              title={getTemperature(value.main.temp)}\r\n              subheader={value.name + \" \" + getCurrentTime()}\r\n            />\r\n            <CardContent>\r\n              <img\r\n                src={`${properties.weatherIconUrl}/${value.weather[0].icon}@2x.png`}\r\n                alt=\"weather-icon\"\r\n              ></img>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button size=\"small\" color=\"primary\" onClick={onButtonClick}>\r\n                {isMetric ? `Fahrenheit` : `Celsius`}\r\n              </Button>\r\n            </CardActions>\r\n          </>\r\n        )}\r\n        {error && <Error />}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { properties } from \"../properties\";\r\n\r\nconst DailyForecast = ({ date, min, max, icon }) => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"body2\" color=\"textSecondary\">\r\n        {new Date(date).toString().slice(0, 10)}\r\n      </Typography>\r\n      <img\r\n        src={`${properties.weatherIconUrl}/${icon}@2x.png`}\r\n        alt=\"weather-icon\"\r\n      ></img>\r\n      <Typography variant=\"body2\" color=\"textPrimary\">\r\n        Max: {max}\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"textSecondary\">\r\n        Min: {min}\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DailyForecast;\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Grid,\r\n  CardActions,\r\n  Button,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\nimport DailyForecast from \"./DailyForecast\";\r\nimport \"../Styles/Forecast.css\";\r\nimport Error from \"./Error\";\r\nimport { converToCelcius } from \"../Helper/TemperatureUtil\";\r\nimport { properties } from \"../properties\";\r\nimport { useHttpHook } from \"../Hooks/HttpHook\";\r\n\r\nconst FiveDayForecast = ({ location, isMetric, onButtonClick }) => {\r\n  const [isLoading, value, error] = useHttpHook(\r\n    properties.forecastUrl,\r\n    location\r\n  );\r\n\r\n  const getTemperature = temp => {\r\n    return isMetric\r\n      ? Math.round(converToCelcius(temp)) + \"\\xB0C\"\r\n      : Math.round(temp) + \"\\xB0F\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <LinearProgress color=\"secondary\" />}\r\n      <Card raised className=\"forecast-app-card\">\r\n        {value && (\r\n          <>\r\n            <CardHeader title={value.city.name} subheader=\"5 Day Forecast\" />\r\n            <CardContent>\r\n              <Grid container justify=\"center\" spacing={4}>\r\n                {value.list\r\n                  .filter((data, index) => index % 8 === 0)\r\n                  .map(data => (\r\n                    <Grid\r\n                      key={data.dt}\r\n                      item\r\n                      className=\"daily-forecast-grid-item\"\r\n                    >\r\n                      <DailyForecast\r\n                        date={data.dt_txt}\r\n                        min={getTemperature(data.main.temp_min)}\r\n                        max={getTemperature(data.main.temp_max)}\r\n                        icon={data.weather[0].icon}\r\n                      />\r\n                    </Grid>\r\n                  ))}\r\n              </Grid>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button size=\"small\" color=\"primary\" onClick={onButtonClick}>\r\n                {isMetric ? `Fahrenheit` : `Celsius`}\r\n              </Button>\r\n            </CardActions>\r\n          </>\r\n        )}\r\n        {error && <Error />}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FiveDayForecast;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { AppBar, Tabs, Tab, Card, CardHeader } from \"@material-ui/core\";\r\nimport Weather from \"./Weather\";\r\nimport FiveDayForecast from \"./FiveDayForecast\";\r\n\r\nconst Home = () => {\r\n  const [value, setValue] = useState(0);\r\n  const [location, setLocation] = useState();\r\n  const [isMetric, setIsMetric] = useState(false);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation &&\r\n      navigator.geolocation.getCurrentPosition(data => {\r\n        const location = {\r\n          latitude: data.coords.latitude,\r\n          longitude: data.coords.longitude\r\n        };\r\n        setLocation(location);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e, val) => {\r\n    setValue(val);\r\n  };\r\n\r\n  const handleMeasureChange = () => {\r\n    setIsMetric(!isMetric);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab label=\"Weather\" />\r\n          <Tab label=\"5 Day Forecast\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      {value === 0 && location && (\r\n        <Weather\r\n          location={location}\r\n          isMetric={isMetric}\r\n          onButtonClick={handleMeasureChange}\r\n        />\r\n      )}\r\n      {value === 1 && location && (\r\n        <FiveDayForecast\r\n          location={location}\r\n          isMetric={isMetric}\r\n          onButtonClick={handleMeasureChange}\r\n        />\r\n      )}\r\n      {!location && (\r\n        <Card raised>\r\n          <CardHeader subheader=\"Please enable location\" />\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}